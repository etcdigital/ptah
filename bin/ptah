#!/usr/bin/env node
require("../lib/required");
const rollup = require("rollup");
const { terser } = require("rollup-plugin-terser");
const nodeResolve = require("@rollup/plugin-node-resolve");
const typescript = require("rollup-plugin-typescript2");
const { babel } = require("@rollup/plugin-babel");
const svgr = require("@svgr/rollup").default;
const url = require("@rollup/plugin-url");
const babelConfig = require("../lib/babel");
const typescriptConfig = require("../lib/typescript");

let config = {};

const configuration = {
	input: config.source,
	output: [
		{
			format: "esm",
			file: config.module,
			sourcemap: false,
			plugins: [terser()],
			exports: "named",
		},
		{
			format: "cjs",
			file: config.main,
			sourcemap: false,
			plugins: [terser()],
			exports: "named",
		},
		{
			name: config["umd:name"] || config.name,
			format: "umd",
			file: config.unpkg,
			sourcemap: false,
			plugins: [terser()],
			exports: "named",
		},
	],
	external: [
		...require("module").builtinModules,
		...Object.keys(config.dependencies || {}),
		...Object.keys(config.devDependencies || {}),
		...Object.keys(config.peerDependencies || {}),
		"react",
	],
	plugins: [
		nodeResolve(),
		typescript(typescriptConfig),
		url(),
		svgr(),
		babel(babelConfig),
	],
};

rollup
	.rollup(configuration)
	.then((bundle) => {
		configuration.output.forEach((output) => {
			bundle.write(output);
		});
	})
	.catch((err) => {
		console.error(err);
		process.exitCode = 1;
	});
