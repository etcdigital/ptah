#!/usr/bin/env node
const rollup = require("rollup");
const fs = require("fs");
const path = require("path");
const { CJS, ESM, UMD } = require("../lib/formats");
const { external } = require("../lib/externals");
const { plugins } = require("../lib/plugins");

const configPath = path.resolve("package.json");
let config = {};

if (fs.existsSync(configPath)) {
	const userConfigModule = require(configPath);
	config = userConfigModule.default || userConfigModule;

	if (!config.name) {
		throw "Package.json should be a name";
	}
	if (!config.exports) {
		throw "Add exports session on package.json";
	}
	if (!config.main) {
		throw "Add main session on package.json";
	}
	if (!config.unpkg) {
		throw "Add unpkg session on package.json";
	}
	if (!config.module) {
		throw "Add module session on package.json";
	}
	if (!config.source) {
		throw "Add source session on package.json";
	}
} else {
	throw "Please, add .build.js configuration file";
}

const configuration = {
	input: config.source,
	output: [
		ESM(config.main),
		CJS(config.main),
		UMD(config.unpkg, config["umd:name"] || config.name),
	],
	external: external(
		config.dependencies || {},
		config.devDependencies || {},
		config.peerDependencies || {},
	),
	plugins,
};

rollup
	.rollup(configuration)
	.then((bundle) => {
		bundle.write(configuration.targets[0]);
	})
	.catch((err) => {
		console.log(err);
		process.exitCode = 1;
	});
