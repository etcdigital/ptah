#!/usr/bin/env node
const rollup = require("rollup");
const fs = require("fs");
const path = require("path");
const { terser } = require("rollup-plugin-terser");
const { nodeResolve } = require("@rollup/plugin-node-resolve");
const typescript = require("rollup-plugin-typescript2");

const configPath = path.resolve("package.json");
let config = {};

if (fs.existsSync(configPath)) {
	const userConfigModule = require(configPath);
	config = userConfigModule.default || userConfigModule;

	if (!config.name) {
		throw "Package.json should be a name";
	}
	if (!config.exports) {
		throw "Add exports session on package.json";
	}
	if (!config.main) {
		throw "Add main session on package.json";
	}
	if (!config.unpkg) {
		throw "Add unpkg session on package.json";
	}
	if (!config.module) {
		throw "Add module session on package.json";
	}
	if (!config.source) {
		throw "Add source session on package.json";
	}
}

const tsconfigPath = path.resolve("tsconfig.json");
if (fs.existsSync(tsconfigPath)) {
	throw "Please, add tsconfig.json";
}

const configuration = {
	input: config.source,
	output: [
		{
			format: "esm",
			file: config.module,
			sourcemap: false,
			plugins: [terser()],
			exports: "named",
		},
		{
			format: "cjs",
			file: config.main,
			sourcemap: false,
			plugins: [terser()],
			exports: "named",
		},
		{
			name: config["umd:name"] || config.name,
			format: "umd",
			file: config.unpkg,
			sourcemap: false,
			plugins: [terser()],
			exports: "named",
		},
	],
	external: [
		...require("module").builtinModules,
		...Object.keys(config.dependencies || {}),
		...Object.keys(config.devDependencies || {}),
		...Object.keys(config.peerDependencies || {}),
		"react",
	],
	plugins: [
		nodeResolve(),
		typescript({
			useTsconfigDeclarationDir: true,
			tsconfig: "tsconfig.json",
		}),
	],
};

rollup
	.rollup(configuration)
	.then((bundle) => {
		configuration.output.forEach((output) => {
			bundle.write(output);
		});
	})
	.catch((err) => {
		console.log(err);
		process.exitCode = 1;
	});
